knitr::opts_chunk$set(echo = TRUE, # Hace que el código se muestre en el html
message = FALSE, # Para no mostrar los mensajes
warning = FALSE, # Para no mostrar los avisos
fig.align = 'center', # Para que las figuras salgan alineadas en el html
)
knitr::opts_chunk$set(echo = TRUE, # Hace que el código se muestre en el html
message = FALSE, # Para no mostrar los mensajes
warning = FALSE, # Para no mostrar los avisos
fig.align = 'center', # Para que las figuras salgan alineadas en el html
)
knitr::opts_chunk$set(echo = TRUE, # Hace que el código se muestre en el html
message = FALSE, # Para no mostrar los mensajes
warning = FALSE, # Para no mostrar los avisos
fig.align = 'center' # Para que las figuras salgan alineadas en el html
)
path<- "~GitHub/Analisis-biologico-con-Machine-Learning/muestras"
setwd(path)
setwd??
?setwd
?setwd
path<- "~GitHub/Analisis-biologico-con-Machine-Learning/muestras/"
setwd(path)
getwd()
setwd("C:/Users/lulim/OneDrive/Documentos/")
setwd(path)
path<- "~GitHub\Analisis-biologico-con-Machine-Learning\muestras\"
path<- "C:/Users/lulim/OneDrive/GitHub/Analisis-biologico-con-Machine-Learning/muestras/"
setwd(path)
path<- "C:\Users\lulim\OneDrive\Documentos\GitHub\Analisis-biologico-con-Machine-Learning\muestras"
path<- "C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras"
setwd(path)
# Cargar los datos
classes <- read.csv(required_files$classes)
# Carga de datos
classes <- read.csv (classes.csv)
# Carga de datos
classes <- read.csv ('classes.csv')
getwd()
setwd(path)
getwd()
path
setwd(path)
getwd()
# Carga de datos
classes <- read.csv (classes.csv)
# Carga de datos
classes <- read.csv ('classes.csv')
getwd()
list.files(wd)
list.files(path = path)
# Carga de datos
classes <- read.csv ("classes.csv")
# Carga de datos
classes <- read.csv ("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/classes.csv")
gene_expression<- read.csv("gene_expression.csv")
getwd()
gene_expression<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/gene_expression.csv")
column_names<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/column_names.txt")
rm(list=ls())
path<- "C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras"
setwd(path)
# Carga de datos
classes <- read.csv ("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/classes.csv")
gene_expression<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/gene_expression.csv")
column_names<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/column_names.txt")
str(gene_expression)
View(gene_expression)
gene_expression<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/gene_expression.csv", sep = ";")
View(gene_expression)
View(classes)
# Carga de datos
classes <- read.csv ("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/classes.csv", sep = ";")
View(classes)
View(column_names)
column_names<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/column_names.txt", sep = ";")
View(column_names)
View(gene_expression)
View(classes)
class(gene_expression)
? as.data.frame
data <- gene_expression
column_names<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/column_names.txt", sep = ";", header = FALSE)
View(column_names)
colnames(data)<-column_names[,X1]
colnames(data)<-column_names[,1]
View(data)
row.names(data)<-classes[,1]
data<- cbind(data,classes[,2])
data<- cbind(data,classes[,2])
gene_expression<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/gene_expression.csv", sep = ";")
View(gene_expression)
View(data)
dim(data)
table(data[,501])
table(data[,502)
table(data[,502])
data <- gene_expression
colnames(data)<-column_names[,1]
row.names(data)<-classes[,1]
data<- cbind(data,classes[,2])
dim(data)
table(data[,501])
gene_expression<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/gene_expression.csv", sep = ";", header = FALSE)
View(gene_expression)
# Carga de datos
classes <- read.csv ("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/classes.csv", sep = ";", header = FALSE)
gene_expression<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/gene_expression.csv", sep = ";", header = FALSE)
column_names<- read.csv("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras/column_names.txt", sep = ";", header = FALSE)
# Creación de un df aglomerando los archivos cargados
data <- gene_expression
colnames(data)<-column_names[,1]
row.names(data)<-classes[,1]
colnames(data)<-column_names[,1]
row.names(data)<-classes[,1]
data<- cbind(data,classes[,2])
dim(data) # Compruebo que las dimensiones del df son, para las columnas, una unidad mayor que en el df "gene_expression"
table(data[,501]) # Compruebo el contenido de la nueva columna
? anyNA
# Imputación de los NA
anyNA(data)
na.omit(data)
dim (data)
?colSums
# Otros tipos de procesamiento
colSums(data[1:500], na.rm = FALSE, dims = 1 )
View(data)
# Otros tipos de procesamiento
sumas<- colSums(data[1:500], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
columnascero <- names(sumas[sumas==0]) # Se extraen los nombres de las columnas cuyas sumas son == 0
print(columnascero) # veo qué datos hay que excluir
data <- data[, !names(data) %in% columnascero] #  Eliminación de las columnas
colSums(is.na(df)) # ¿Quedan columnas con valores = 0?
colSums(is.na(data)) # ¿Quedan columnas con valores = 0?
data_num <- data.frame(sapply(data[,1:500], as.numeric)) # Convierto los valores de expresion a numericos.
data_num <- data.frame(sapply(data[,1:500], as.numeric)) # Convierto los valores de expresion a numericos.
data_num <- data.frame(sapply(data[,1:(ncol(data) - 1)], as.numeric)) # Convierto los valores de expresion a numericos.
sc_data_num <- scale(data_num[,1:(ncol(data) - 1)])# Escalo los datos
View(sc_data_num)
str(sc_data_num)
sc_data_num[,(ncol(sc_data_num) - 1)]
sc_data_num[,-1]
View(sc_data_num)
View(data_num)
knitr::opts_chunk$set(echo = TRUE, # Hace que el código se muestre en el html
message = FALSE, # Para no mostrar los mensajes
warning = FALSE, # Para no mostrar los avisos
fig.align = 'center' # Para que las figuras salgan alineadas en el html
)
# Creo que la instalación de paquetes debería ir en cada chunk, cada uno sabe lo que pone para su parte del trabajo. Cuando esté completo trasladamos las líneas de código de instalación a esta parte.
library()
sumas<- colSums(data_num[1:497], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
columnascero <- names(sumas[sumas==0])
print(columnascero)
sumas<- colSums(data_num[1:497], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
# Otros tipos de procesamiento
sumas<- colSums(data[1:500], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
# Creación de un df aglomerando los archivos cargados
data <- gene_expression
colnames(data)<-column_names[,1]
row.names(data)<-classes[,1]
data<- cbind(data,classes[,2])
# Otros tipos de procesamiento
sumas<- colSums(data[1:500], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
columnascero <- names(sumas[sumas==0]) # Se extraen los nombres de las columnas cuyas sumas son == 0
print(columnascero) # Se muestran los genes (columnas) a excluir
data <- data[, !names(data) %in% columnascero] #  Eliminación de las columnas
colSums(is.na(data)) # Revisión de que tras el filtrado no se han generado valores NA
data_num <- data.frame(sapply(data[,1:(ncol(data) - 1)], as.numeric)) # Conversión de los valores de expresión a numéricos.
sumas<- colSums(data_num[1:497], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
columnascero <- names(sumas[sumas==0])
print(columnascero)
sc_data_num <- scale(data_num[,1:(ncol(data) - 1)])# Escalado de los datos
sumas<- colSums(sc_data_num], na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
sumas<- colSums(sc_data_num, na.rm = FALSE, dims = 1 ) # Suma de los datos por columnas
columnascero <- names(sumas[sumas==0])
print(columnascero)
colSums(is.na(data_num))
colSums(is.na(sc_data_num))
# Guardado de datos
write.csv(data_num, "data_num", row.names = FALSE)
getwd()
# Guardado de datos
write.csv(data_num, "data_num", row.names = FALSE)
# Guardado de datos
write.csv(data_num, "data_num", row.names = FALSE)
print(wd)
setwd("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras")
# Guardado de datos
write.csv(data_num, "data_num", row.names = FALSE)
sc_data_num_df <- as.data.frame(sc_data_num) # Conversión de la matriz a un data frame
write.csv(sc_data_num_df, "sc_data_num.csv", row.names = FALSE)
setwd("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras")
write.csv(sc_data_num_df, "sc_data_num.csv", row.names = FALSE)
setwd("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras")
# Guardado de datos
write.csv(data_num, "data_num.csv", row.names = FALSE)
setwd("C:/Users/lulim/OneDrive/Documentos/GitHub/Analisis-biologico-con-Machine-Learning/muestras")
# Guardado de datos
write.csv(data_num, "data_num.csv", row.names = FALSE)
